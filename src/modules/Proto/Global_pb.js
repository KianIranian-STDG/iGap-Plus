/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.proto.Avatar', null, global);
goog.exportSymbol('proto.proto.ChannelRoom', null, global);
goog.exportSymbol('proto.proto.ChannelRoom.PrivateExtra', null, global);
goog.exportSymbol('proto.proto.ChannelRoom.PublicExtra', null, global);
goog.exportSymbol('proto.proto.ChannelRoom.Role', null, global);
goog.exportSymbol('proto.proto.ChannelRoom.Type', null, global);
goog.exportSymbol('proto.proto.ChatRoom', null, global);
goog.exportSymbol('proto.proto.ClientAction', null, global);
goog.exportSymbol('proto.proto.Device', null, global);
goog.exportSymbol('proto.proto.File', null, global);
goog.exportSymbol('proto.proto.Gender', null, global);
goog.exportSymbol('proto.proto.GroupRoom', null, global);
goog.exportSymbol('proto.proto.GroupRoom.PrivateExtra', null, global);
goog.exportSymbol('proto.proto.GroupRoom.PublicExtra', null, global);
goog.exportSymbol('proto.proto.GroupRoom.Role', null, global);
goog.exportSymbol('proto.proto.GroupRoom.Type', null, global);
goog.exportSymbol('proto.proto.Language', null, global);
goog.exportSymbol('proto.proto.Pagination', null, global);
goog.exportSymbol('proto.proto.Platform', null, global);
goog.exportSymbol('proto.proto.PrivacyLevel', null, global);
goog.exportSymbol('proto.proto.PrivacyType', null, global);
goog.exportSymbol('proto.proto.RegisteredUser', null, global);
goog.exportSymbol('proto.proto.RegisteredUser.Status', null, global);
goog.exportSymbol('proto.proto.Room', null, global);
goog.exportSymbol('proto.proto.Room.Type', null, global);
goog.exportSymbol('proto.proto.RoomDraft', null, global);
goog.exportSymbol('proto.proto.RoomMessage', null, global);
goog.exportSymbol('proto.proto.RoomMessage.Author', null, global);
goog.exportSymbol('proto.proto.RoomMessage.Author.Room', null, global);
goog.exportSymbol('proto.proto.RoomMessage.Author.User', null, global);
goog.exportSymbol('proto.proto.RoomMessage.ChannelExtra', null, global);
goog.exportSymbol('proto.proto.RoomMessage.ExtraType', null, global);
goog.exportSymbol('proto.proto.RoomMessageContact', null, global);
goog.exportSymbol('proto.proto.RoomMessageForwardFrom', null, global);
goog.exportSymbol('proto.proto.RoomMessageLocation', null, global);
goog.exportSymbol('proto.proto.RoomMessageLog', null, global);
goog.exportSymbol('proto.proto.RoomMessageLog.ExtraType', null, global);
goog.exportSymbol('proto.proto.RoomMessageLog.TargetUser', null, global);
goog.exportSymbol('proto.proto.RoomMessageLog.Type', null, global);
goog.exportSymbol('proto.proto.RoomMessageReaction', null, global);
goog.exportSymbol('proto.proto.RoomMessageStatus', null, global);
goog.exportSymbol('proto.proto.RoomMessageType', null, global);
goog.exportSymbol('proto.proto.Thumbnail', null, global);
goog.exportSymbol('proto.proto.Wallpaper', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RoomMessageLocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.RoomMessageLocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.RoomMessageLocation.displayName = 'proto.proto.RoomMessageLocation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RoomMessageLocation.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RoomMessageLocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RoomMessageLocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoomMessageLocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    lat: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    lon: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RoomMessageLocation}
 */
proto.proto.RoomMessageLocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RoomMessageLocation;
  return proto.proto.RoomMessageLocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RoomMessageLocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RoomMessageLocation}
 */
proto.proto.RoomMessageLocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLat(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RoomMessageLocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RoomMessageLocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RoomMessageLocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoomMessageLocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLat();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getLon();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double lat = 1;
 * @return {number}
 */
proto.proto.RoomMessageLocation.prototype.getLat = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.proto.RoomMessageLocation.prototype.setLat = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional double lon = 2;
 * @return {number}
 */
proto.proto.RoomMessageLocation.prototype.getLon = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.proto.RoomMessageLocation.prototype.setLon = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RoomMessageLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.RoomMessageLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.RoomMessageLog.displayName = 'proto.proto.RoomMessageLog';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RoomMessageLog.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RoomMessageLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RoomMessageLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoomMessageLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    extraType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    targetUser: (f = msg.getTargetUser()) && proto.proto.RoomMessageLog.TargetUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RoomMessageLog}
 */
proto.proto.RoomMessageLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RoomMessageLog;
  return proto.proto.RoomMessageLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RoomMessageLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RoomMessageLog}
 */
proto.proto.RoomMessageLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.RoomMessageLog.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!proto.proto.RoomMessageLog.ExtraType} */ (reader.readEnum());
      msg.setExtraType(value);
      break;
    case 3:
      var value = new proto.proto.RoomMessageLog.TargetUser;
      reader.readMessage(value,proto.proto.RoomMessageLog.TargetUser.deserializeBinaryFromReader);
      msg.setTargetUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RoomMessageLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RoomMessageLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RoomMessageLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoomMessageLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getExtraType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTargetUser();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.RoomMessageLog.TargetUser.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.RoomMessageLog.Type = {
  USER_JOINED: 0,
  USER_DELETED: 1,
  ROOM_CREATED: 2,
  MEMBER_ADDED: 3,
  MEMBER_KICKED: 4,
  MEMBER_LEFT: 5,
  ROOM_CONVERTED_TO_PUBLIC: 6,
  ROOM_CONVERTED_TO_PRIVATE: 7,
  MEMBER_JOINED_BY_INVITE_LINK: 8,
  ROOM_DELETED: 9,
  MISSED_VOICE_CALL: 10,
  MISSED_VIDEO_CALL: 11,
  MISSED_SCREEN_SHARE: 12,
  MISSED_SECRET_CHAT: 13
};

/**
 * @enum {number}
 */
proto.proto.RoomMessageLog.ExtraType = {
  NO_EXTRA: 0,
  TARGET_USER: 1
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RoomMessageLog.TargetUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.RoomMessageLog.TargetUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.RoomMessageLog.TargetUser.displayName = 'proto.proto.RoomMessageLog.TargetUser';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RoomMessageLog.TargetUser.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RoomMessageLog.TargetUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RoomMessageLog.TargetUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoomMessageLog.TargetUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RoomMessageLog.TargetUser}
 */
proto.proto.RoomMessageLog.TargetUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RoomMessageLog.TargetUser;
  return proto.proto.RoomMessageLog.TargetUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RoomMessageLog.TargetUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RoomMessageLog.TargetUser}
 */
proto.proto.RoomMessageLog.TargetUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RoomMessageLog.TargetUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RoomMessageLog.TargetUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RoomMessageLog.TargetUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoomMessageLog.TargetUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.proto.RoomMessageLog.TargetUser.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.RoomMessageLog.TargetUser.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Type type = 1;
 * @return {!proto.proto.RoomMessageLog.Type}
 */
proto.proto.RoomMessageLog.prototype.getType = function() {
  return /** @type {!proto.proto.RoomMessageLog.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.proto.RoomMessageLog.Type} value */
proto.proto.RoomMessageLog.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ExtraType extra_type = 2;
 * @return {!proto.proto.RoomMessageLog.ExtraType}
 */
proto.proto.RoomMessageLog.prototype.getExtraType = function() {
  return /** @type {!proto.proto.RoomMessageLog.ExtraType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.proto.RoomMessageLog.ExtraType} value */
proto.proto.RoomMessageLog.prototype.setExtraType = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional TargetUser target_user = 3;
 * @return {?proto.proto.RoomMessageLog.TargetUser}
 */
proto.proto.RoomMessageLog.prototype.getTargetUser = function() {
  return /** @type{?proto.proto.RoomMessageLog.TargetUser} */ (
    jspb.Message.getWrapperField(this, proto.proto.RoomMessageLog.TargetUser, 3));
};


/** @param {?proto.proto.RoomMessageLog.TargetUser|undefined} value */
proto.proto.RoomMessageLog.prototype.setTargetUser = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.proto.RoomMessageLog.prototype.clearTargetUser = function() {
  this.setTargetUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.RoomMessageLog.prototype.hasTargetUser = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RoomMessageContact = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.RoomMessageContact.repeatedFields_, null);
};
goog.inherits(proto.proto.RoomMessageContact, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.RoomMessageContact.displayName = 'proto.proto.RoomMessageContact';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.RoomMessageContact.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RoomMessageContact.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RoomMessageContact.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RoomMessageContact} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoomMessageContact.toObject = function(includeInstance, msg) {
  var f, obj = {
    firstName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lastName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nickname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    phoneList: jspb.Message.getRepeatedField(msg, 4),
    emailList: jspb.Message.getRepeatedField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RoomMessageContact}
 */
proto.proto.RoomMessageContact.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RoomMessageContact;
  return proto.proto.RoomMessageContact.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RoomMessageContact} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RoomMessageContact}
 */
proto.proto.RoomMessageContact.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addPhone(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addEmail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RoomMessageContact.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RoomMessageContact.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RoomMessageContact} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoomMessageContact.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirstName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLastName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNickname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPhoneList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getEmailList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * optional string first_name = 1;
 * @return {string}
 */
proto.proto.RoomMessageContact.prototype.getFirstName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.RoomMessageContact.prototype.setFirstName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string last_name = 2;
 * @return {string}
 */
proto.proto.RoomMessageContact.prototype.getLastName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.RoomMessageContact.prototype.setLastName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string nickname = 3;
 * @return {string}
 */
proto.proto.RoomMessageContact.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.proto.RoomMessageContact.prototype.setNickname = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated string phone = 4;
 * @return {!Array.<string>}
 */
proto.proto.RoomMessageContact.prototype.getPhoneList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<string>} value */
proto.proto.RoomMessageContact.prototype.setPhoneList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.proto.RoomMessageContact.prototype.addPhone = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.proto.RoomMessageContact.prototype.clearPhoneList = function() {
  this.setPhoneList([]);
};


/**
 * repeated string email = 5;
 * @return {!Array.<string>}
 */
proto.proto.RoomMessageContact.prototype.getEmailList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<string>} value */
proto.proto.RoomMessageContact.prototype.setEmailList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.proto.RoomMessageContact.prototype.addEmail = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.proto.RoomMessageContact.prototype.clearEmailList = function() {
  this.setEmailList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RoomMessageForwardFrom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.RoomMessageForwardFrom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.RoomMessageForwardFrom.displayName = 'proto.proto.RoomMessageForwardFrom';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RoomMessageForwardFrom.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RoomMessageForwardFrom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RoomMessageForwardFrom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoomMessageForwardFrom.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    messageId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RoomMessageForwardFrom}
 */
proto.proto.RoomMessageForwardFrom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RoomMessageForwardFrom;
  return proto.proto.RoomMessageForwardFrom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RoomMessageForwardFrom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RoomMessageForwardFrom}
 */
proto.proto.RoomMessageForwardFrom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRoomId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMessageId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RoomMessageForwardFrom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RoomMessageForwardFrom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RoomMessageForwardFrom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoomMessageForwardFrom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMessageId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 room_id = 1;
 * @return {number}
 */
proto.proto.RoomMessageForwardFrom.prototype.getRoomId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.RoomMessageForwardFrom.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 message_id = 2;
 * @return {number}
 */
proto.proto.RoomMessageForwardFrom.prototype.getMessageId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.RoomMessageForwardFrom.prototype.setMessageId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RegisteredUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.RegisteredUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.RegisteredUser.displayName = 'proto.proto.RegisteredUser';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RegisteredUser.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RegisteredUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RegisteredUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RegisteredUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    username: jspb.Message.getFieldWithDefault(msg, 2, ""),
    phone: jspb.Message.getFieldWithDefault(msg, 3, 0),
    firstName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    lastName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    displayName: jspb.Message.getFieldWithDefault(msg, 6, ""),
    initials: jspb.Message.getFieldWithDefault(msg, 7, ""),
    color: jspb.Message.getFieldWithDefault(msg, 8, ""),
    status: jspb.Message.getFieldWithDefault(msg, 9, 0),
    lastSeen: jspb.Message.getFieldWithDefault(msg, 10, 0),
    avatarCount: jspb.Message.getFieldWithDefault(msg, 11, 0),
    avatar: (f = msg.getAvatar()) && proto.proto.Avatar.toObject(includeInstance, f),
    mutual: jspb.Message.getFieldWithDefault(msg, 13, false),
    deleted: jspb.Message.getFieldWithDefault(msg, 14, false),
    cacheId: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RegisteredUser}
 */
proto.proto.RegisteredUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RegisteredUser;
  return proto.proto.RegisteredUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RegisteredUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RegisteredUser}
 */
proto.proto.RegisteredUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPhone(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setInitials(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    case 9:
      var value = /** @type {!proto.proto.RegisteredUser.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLastSeen(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAvatarCount(value);
      break;
    case 12:
      var value = new proto.proto.Avatar;
      reader.readMessage(value,proto.proto.Avatar.deserializeBinaryFromReader);
      msg.setAvatar(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMutual(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeleted(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setCacheId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RegisteredUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RegisteredUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RegisteredUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RegisteredUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPhone();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getFirstName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLastName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDisplayName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getInitials();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getLastSeen();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getAvatarCount();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getAvatar();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.proto.Avatar.serializeBinaryToWriter
    );
  }
  f = message.getMutual();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getDeleted();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getCacheId();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.RegisteredUser.Status = {
  LONG_TIME_AGO: 0,
  LAST_MONTH: 1,
  LAST_WEEK: 2,
  ONLINE: 3,
  EXACTLY: 4,
  RECENTLY: 5,
  SUPPORT: 6,
  SERVICE_NOTIFICATIONS: 7
};

/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.proto.RegisteredUser.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.RegisteredUser.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string username = 2;
 * @return {string}
 */
proto.proto.RegisteredUser.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.RegisteredUser.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 phone = 3;
 * @return {number}
 */
proto.proto.RegisteredUser.prototype.getPhone = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.RegisteredUser.prototype.setPhone = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string first_name = 4;
 * @return {string}
 */
proto.proto.RegisteredUser.prototype.getFirstName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.proto.RegisteredUser.prototype.setFirstName = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string last_name = 5;
 * @return {string}
 */
proto.proto.RegisteredUser.prototype.getLastName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.proto.RegisteredUser.prototype.setLastName = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string display_name = 6;
 * @return {string}
 */
proto.proto.RegisteredUser.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.proto.RegisteredUser.prototype.setDisplayName = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string initials = 7;
 * @return {string}
 */
proto.proto.RegisteredUser.prototype.getInitials = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.proto.RegisteredUser.prototype.setInitials = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string color = 8;
 * @return {string}
 */
proto.proto.RegisteredUser.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.proto.RegisteredUser.prototype.setColor = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional Status status = 9;
 * @return {!proto.proto.RegisteredUser.Status}
 */
proto.proto.RegisteredUser.prototype.getStatus = function() {
  return /** @type {!proto.proto.RegisteredUser.Status} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {!proto.proto.RegisteredUser.Status} value */
proto.proto.RegisteredUser.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional uint32 last_seen = 10;
 * @return {number}
 */
proto.proto.RegisteredUser.prototype.getLastSeen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.proto.RegisteredUser.prototype.setLastSeen = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional uint32 avatar_count = 11;
 * @return {number}
 */
proto.proto.RegisteredUser.prototype.getAvatarCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.proto.RegisteredUser.prototype.setAvatarCount = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional Avatar avatar = 12;
 * @return {?proto.proto.Avatar}
 */
proto.proto.RegisteredUser.prototype.getAvatar = function() {
  return /** @type{?proto.proto.Avatar} */ (
    jspb.Message.getWrapperField(this, proto.proto.Avatar, 12));
};


/** @param {?proto.proto.Avatar|undefined} value */
proto.proto.RegisteredUser.prototype.setAvatar = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.proto.RegisteredUser.prototype.clearAvatar = function() {
  this.setAvatar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.RegisteredUser.prototype.hasAvatar = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional bool mutual = 13;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.RegisteredUser.prototype.getMutual = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 13, false));
};


/** @param {boolean} value */
proto.proto.RegisteredUser.prototype.setMutual = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional bool deleted = 14;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.RegisteredUser.prototype.getDeleted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 14, false));
};


/** @param {boolean} value */
proto.proto.RegisteredUser.prototype.setDeleted = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional string cache_id = 15;
 * @return {string}
 */
proto.proto.RegisteredUser.prototype.getCacheId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.proto.RegisteredUser.prototype.setCacheId = function(value) {
  jspb.Message.setField(this, 15, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Avatar = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Avatar, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.Avatar.displayName = 'proto.proto.Avatar';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Avatar.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Avatar.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Avatar} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Avatar.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    file: (f = msg.getFile()) && proto.proto.File.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Avatar}
 */
proto.proto.Avatar.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Avatar;
  return proto.proto.Avatar.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Avatar} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Avatar}
 */
proto.proto.Avatar.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.proto.File;
      reader.readMessage(value,proto.proto.File.deserializeBinaryFromReader);
      msg.setFile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Avatar.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Avatar.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Avatar} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Avatar.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getFile();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.File.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.proto.Avatar.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.Avatar.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional File file = 2;
 * @return {?proto.proto.File}
 */
proto.proto.Avatar.prototype.getFile = function() {
  return /** @type{?proto.proto.File} */ (
    jspb.Message.getWrapperField(this, proto.proto.File, 2));
};


/** @param {?proto.proto.File|undefined} value */
proto.proto.Avatar.prototype.setFile = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.proto.Avatar.prototype.clearFile = function() {
  this.setFile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Avatar.prototype.hasFile = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RoomMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.RoomMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.RoomMessage.displayName = 'proto.proto.RoomMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RoomMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RoomMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RoomMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoomMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    messageVersion: jspb.Message.getFieldWithDefault(msg, 2, 0),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    statusVersion: jspb.Message.getFieldWithDefault(msg, 4, 0),
    messageType: jspb.Message.getFieldWithDefault(msg, 5, 0),
    message: jspb.Message.getFieldWithDefault(msg, 6, ""),
    attachment: (f = msg.getAttachment()) && proto.proto.File.toObject(includeInstance, f),
    author: (f = msg.getAuthor()) && proto.proto.RoomMessage.Author.toObject(includeInstance, f),
    location: (f = msg.getLocation()) && proto.proto.RoomMessageLocation.toObject(includeInstance, f),
    log: (f = msg.getLog()) && proto.proto.RoomMessageLog.toObject(includeInstance, f),
    contact: (f = msg.getContact()) && proto.proto.RoomMessageContact.toObject(includeInstance, f),
    edited: jspb.Message.getFieldWithDefault(msg, 12, false),
    createTime: jspb.Message.getFieldWithDefault(msg, 13, 0),
    updateTime: jspb.Message.getFieldWithDefault(msg, 14, 0),
    deleted: jspb.Message.getFieldWithDefault(msg, 15, false),
    forwardFrom: (f = msg.getForwardFrom()) && proto.proto.RoomMessage.toObject(includeInstance, f),
    replyTo: (f = msg.getReplyTo()) && proto.proto.RoomMessage.toObject(includeInstance, f),
    previousMessageId: jspb.Message.getFieldWithDefault(msg, 18, 0),
    extraType: jspb.Message.getFieldWithDefault(msg, 19, 0),
    channelExtra: (f = msg.getChannelExtra()) && proto.proto.RoomMessage.ChannelExtra.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RoomMessage}
 */
proto.proto.RoomMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RoomMessage;
  return proto.proto.RoomMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RoomMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RoomMessage}
 */
proto.proto.RoomMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMessageId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMessageVersion(value);
      break;
    case 3:
      var value = /** @type {!proto.proto.RoomMessageStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStatusVersion(value);
      break;
    case 5:
      var value = /** @type {!proto.proto.RoomMessageType} */ (reader.readEnum());
      msg.setMessageType(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 7:
      var value = new proto.proto.File;
      reader.readMessage(value,proto.proto.File.deserializeBinaryFromReader);
      msg.setAttachment(value);
      break;
    case 8:
      var value = new proto.proto.RoomMessage.Author;
      reader.readMessage(value,proto.proto.RoomMessage.Author.deserializeBinaryFromReader);
      msg.setAuthor(value);
      break;
    case 9:
      var value = new proto.proto.RoomMessageLocation;
      reader.readMessage(value,proto.proto.RoomMessageLocation.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 10:
      var value = new proto.proto.RoomMessageLog;
      reader.readMessage(value,proto.proto.RoomMessageLog.deserializeBinaryFromReader);
      msg.setLog(value);
      break;
    case 11:
      var value = new proto.proto.RoomMessageContact;
      reader.readMessage(value,proto.proto.RoomMessageContact.deserializeBinaryFromReader);
      msg.setContact(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEdited(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCreateTime(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUpdateTime(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeleted(value);
      break;
    case 16:
      var value = new proto.proto.RoomMessage;
      reader.readMessage(value,proto.proto.RoomMessage.deserializeBinaryFromReader);
      msg.setForwardFrom(value);
      break;
    case 17:
      var value = new proto.proto.RoomMessage;
      reader.readMessage(value,proto.proto.RoomMessage.deserializeBinaryFromReader);
      msg.setReplyTo(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPreviousMessageId(value);
      break;
    case 19:
      var value = /** @type {!proto.proto.RoomMessage.ExtraType} */ (reader.readEnum());
      msg.setExtraType(value);
      break;
    case 20:
      var value = new proto.proto.RoomMessage.ChannelExtra;
      reader.readMessage(value,proto.proto.RoomMessage.ChannelExtra.deserializeBinaryFromReader);
      msg.setChannelExtra(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RoomMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RoomMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RoomMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoomMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMessageVersion();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getStatusVersion();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getMessageType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAttachment();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.proto.File.serializeBinaryToWriter
    );
  }
  f = message.getAuthor();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.proto.RoomMessage.Author.serializeBinaryToWriter
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.proto.RoomMessageLocation.serializeBinaryToWriter
    );
  }
  f = message.getLog();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.proto.RoomMessageLog.serializeBinaryToWriter
    );
  }
  f = message.getContact();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.proto.RoomMessageContact.serializeBinaryToWriter
    );
  }
  f = message.getEdited();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getCreateTime();
  if (f !== 0) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = message.getUpdateTime();
  if (f !== 0) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = message.getDeleted();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getForwardFrom();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.proto.RoomMessage.serializeBinaryToWriter
    );
  }
  f = message.getReplyTo();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.proto.RoomMessage.serializeBinaryToWriter
    );
  }
  f = message.getPreviousMessageId();
  if (f !== 0) {
    writer.writeUint64(
      18,
      f
    );
  }
  f = message.getExtraType();
  if (f !== 0.0) {
    writer.writeEnum(
      19,
      f
    );
  }
  f = message.getChannelExtra();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.proto.RoomMessage.ChannelExtra.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.RoomMessage.ExtraType = {
  NO_EXTRA: 0,
  CHANNEL_EXTRA: 1
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RoomMessage.Author = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.RoomMessage.Author, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.RoomMessage.Author.displayName = 'proto.proto.RoomMessage.Author';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RoomMessage.Author.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RoomMessage.Author.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RoomMessage.Author} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoomMessage.Author.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    user: (f = msg.getUser()) && proto.proto.RoomMessage.Author.User.toObject(includeInstance, f),
    room: (f = msg.getRoom()) && proto.proto.RoomMessage.Author.Room.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RoomMessage.Author}
 */
proto.proto.RoomMessage.Author.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RoomMessage.Author;
  return proto.proto.RoomMessage.Author.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RoomMessage.Author} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RoomMessage.Author}
 */
proto.proto.RoomMessage.Author.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 2:
      var value = new proto.proto.RoomMessage.Author.User;
      reader.readMessage(value,proto.proto.RoomMessage.Author.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 3:
      var value = new proto.proto.RoomMessage.Author.Room;
      reader.readMessage(value,proto.proto.RoomMessage.Author.Room.deserializeBinaryFromReader);
      msg.setRoom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RoomMessage.Author.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RoomMessage.Author.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RoomMessage.Author} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoomMessage.Author.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.RoomMessage.Author.User.serializeBinaryToWriter
    );
  }
  f = message.getRoom();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.RoomMessage.Author.Room.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RoomMessage.Author.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.RoomMessage.Author.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.RoomMessage.Author.User.displayName = 'proto.proto.RoomMessage.Author.User';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RoomMessage.Author.User.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RoomMessage.Author.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RoomMessage.Author.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoomMessage.Author.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cacheId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RoomMessage.Author.User}
 */
proto.proto.RoomMessage.Author.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RoomMessage.Author.User;
  return proto.proto.RoomMessage.Author.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RoomMessage.Author.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RoomMessage.Author.User}
 */
proto.proto.RoomMessage.Author.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCacheId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RoomMessage.Author.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RoomMessage.Author.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RoomMessage.Author.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoomMessage.Author.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCacheId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint64 user_id = 1;
 * @return {number}
 */
proto.proto.RoomMessage.Author.User.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.RoomMessage.Author.User.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string cache_id = 2;
 * @return {string}
 */
proto.proto.RoomMessage.Author.User.prototype.getCacheId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.RoomMessage.Author.User.prototype.setCacheId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RoomMessage.Author.Room = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.RoomMessage.Author.Room, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.RoomMessage.Author.Room.displayName = 'proto.proto.RoomMessage.Author.Room';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RoomMessage.Author.Room.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RoomMessage.Author.Room.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RoomMessage.Author.Room} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoomMessage.Author.Room.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RoomMessage.Author.Room}
 */
proto.proto.RoomMessage.Author.Room.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RoomMessage.Author.Room;
  return proto.proto.RoomMessage.Author.Room.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RoomMessage.Author.Room} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RoomMessage.Author.Room}
 */
proto.proto.RoomMessage.Author.Room.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRoomId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RoomMessage.Author.Room.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RoomMessage.Author.Room.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RoomMessage.Author.Room} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoomMessage.Author.Room.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 room_id = 1;
 * @return {number}
 */
proto.proto.RoomMessage.Author.Room.prototype.getRoomId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.RoomMessage.Author.Room.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.proto.RoomMessage.Author.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.RoomMessage.Author.prototype.setHash = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional User user = 2;
 * @return {?proto.proto.RoomMessage.Author.User}
 */
proto.proto.RoomMessage.Author.prototype.getUser = function() {
  return /** @type{?proto.proto.RoomMessage.Author.User} */ (
    jspb.Message.getWrapperField(this, proto.proto.RoomMessage.Author.User, 2));
};


/** @param {?proto.proto.RoomMessage.Author.User|undefined} value */
proto.proto.RoomMessage.Author.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.proto.RoomMessage.Author.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.RoomMessage.Author.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Room room = 3;
 * @return {?proto.proto.RoomMessage.Author.Room}
 */
proto.proto.RoomMessage.Author.prototype.getRoom = function() {
  return /** @type{?proto.proto.RoomMessage.Author.Room} */ (
    jspb.Message.getWrapperField(this, proto.proto.RoomMessage.Author.Room, 3));
};


/** @param {?proto.proto.RoomMessage.Author.Room|undefined} value */
proto.proto.RoomMessage.Author.prototype.setRoom = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.proto.RoomMessage.Author.prototype.clearRoom = function() {
  this.setRoom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.RoomMessage.Author.prototype.hasRoom = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RoomMessage.ChannelExtra = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.RoomMessage.ChannelExtra, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.RoomMessage.ChannelExtra.displayName = 'proto.proto.RoomMessage.ChannelExtra';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RoomMessage.ChannelExtra.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RoomMessage.ChannelExtra.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RoomMessage.ChannelExtra} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoomMessage.ChannelExtra.toObject = function(includeInstance, msg) {
  var f, obj = {
    signature: jspb.Message.getFieldWithDefault(msg, 1, ""),
    viewsLabel: jspb.Message.getFieldWithDefault(msg, 2, ""),
    thumbsUpLabel: jspb.Message.getFieldWithDefault(msg, 3, ""),
    thumbsDownLabel: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RoomMessage.ChannelExtra}
 */
proto.proto.RoomMessage.ChannelExtra.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RoomMessage.ChannelExtra;
  return proto.proto.RoomMessage.ChannelExtra.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RoomMessage.ChannelExtra} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RoomMessage.ChannelExtra}
 */
proto.proto.RoomMessage.ChannelExtra.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setViewsLabel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setThumbsUpLabel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setThumbsDownLabel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RoomMessage.ChannelExtra.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RoomMessage.ChannelExtra.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RoomMessage.ChannelExtra} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoomMessage.ChannelExtra.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getViewsLabel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getThumbsUpLabel();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getThumbsDownLabel();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string signature = 1;
 * @return {string}
 */
proto.proto.RoomMessage.ChannelExtra.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.RoomMessage.ChannelExtra.prototype.setSignature = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string views_label = 2;
 * @return {string}
 */
proto.proto.RoomMessage.ChannelExtra.prototype.getViewsLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.RoomMessage.ChannelExtra.prototype.setViewsLabel = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string thumbs_up_label = 3;
 * @return {string}
 */
proto.proto.RoomMessage.ChannelExtra.prototype.getThumbsUpLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.proto.RoomMessage.ChannelExtra.prototype.setThumbsUpLabel = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string thumbs_down_label = 4;
 * @return {string}
 */
proto.proto.RoomMessage.ChannelExtra.prototype.getThumbsDownLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.proto.RoomMessage.ChannelExtra.prototype.setThumbsDownLabel = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint64 message_id = 1;
 * @return {number}
 */
proto.proto.RoomMessage.prototype.getMessageId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.RoomMessage.prototype.setMessageId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 message_version = 2;
 * @return {number}
 */
proto.proto.RoomMessage.prototype.getMessageVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.RoomMessage.prototype.setMessageVersion = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional RoomMessageStatus status = 3;
 * @return {!proto.proto.RoomMessageStatus}
 */
proto.proto.RoomMessage.prototype.getStatus = function() {
  return /** @type {!proto.proto.RoomMessageStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.proto.RoomMessageStatus} value */
proto.proto.RoomMessage.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint64 status_version = 4;
 * @return {number}
 */
proto.proto.RoomMessage.prototype.getStatusVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.RoomMessage.prototype.setStatusVersion = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional RoomMessageType message_type = 5;
 * @return {!proto.proto.RoomMessageType}
 */
proto.proto.RoomMessage.prototype.getMessageType = function() {
  return /** @type {!proto.proto.RoomMessageType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.proto.RoomMessageType} value */
proto.proto.RoomMessage.prototype.setMessageType = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string message = 6;
 * @return {string}
 */
proto.proto.RoomMessage.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.proto.RoomMessage.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional File attachment = 7;
 * @return {?proto.proto.File}
 */
proto.proto.RoomMessage.prototype.getAttachment = function() {
  return /** @type{?proto.proto.File} */ (
    jspb.Message.getWrapperField(this, proto.proto.File, 7));
};


/** @param {?proto.proto.File|undefined} value */
proto.proto.RoomMessage.prototype.setAttachment = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.proto.RoomMessage.prototype.clearAttachment = function() {
  this.setAttachment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.RoomMessage.prototype.hasAttachment = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Author author = 8;
 * @return {?proto.proto.RoomMessage.Author}
 */
proto.proto.RoomMessage.prototype.getAuthor = function() {
  return /** @type{?proto.proto.RoomMessage.Author} */ (
    jspb.Message.getWrapperField(this, proto.proto.RoomMessage.Author, 8));
};


/** @param {?proto.proto.RoomMessage.Author|undefined} value */
proto.proto.RoomMessage.prototype.setAuthor = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.proto.RoomMessage.prototype.clearAuthor = function() {
  this.setAuthor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.RoomMessage.prototype.hasAuthor = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional RoomMessageLocation location = 9;
 * @return {?proto.proto.RoomMessageLocation}
 */
proto.proto.RoomMessage.prototype.getLocation = function() {
  return /** @type{?proto.proto.RoomMessageLocation} */ (
    jspb.Message.getWrapperField(this, proto.proto.RoomMessageLocation, 9));
};


/** @param {?proto.proto.RoomMessageLocation|undefined} value */
proto.proto.RoomMessage.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.proto.RoomMessage.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.RoomMessage.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional RoomMessageLog log = 10;
 * @return {?proto.proto.RoomMessageLog}
 */
proto.proto.RoomMessage.prototype.getLog = function() {
  return /** @type{?proto.proto.RoomMessageLog} */ (
    jspb.Message.getWrapperField(this, proto.proto.RoomMessageLog, 10));
};


/** @param {?proto.proto.RoomMessageLog|undefined} value */
proto.proto.RoomMessage.prototype.setLog = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.proto.RoomMessage.prototype.clearLog = function() {
  this.setLog(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.RoomMessage.prototype.hasLog = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional RoomMessageContact contact = 11;
 * @return {?proto.proto.RoomMessageContact}
 */
proto.proto.RoomMessage.prototype.getContact = function() {
  return /** @type{?proto.proto.RoomMessageContact} */ (
    jspb.Message.getWrapperField(this, proto.proto.RoomMessageContact, 11));
};


/** @param {?proto.proto.RoomMessageContact|undefined} value */
proto.proto.RoomMessage.prototype.setContact = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.proto.RoomMessage.prototype.clearContact = function() {
  this.setContact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.RoomMessage.prototype.hasContact = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bool edited = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.RoomMessage.prototype.getEdited = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.proto.RoomMessage.prototype.setEdited = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional uint32 create_time = 13;
 * @return {number}
 */
proto.proto.RoomMessage.prototype.getCreateTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.proto.RoomMessage.prototype.setCreateTime = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional uint32 update_time = 14;
 * @return {number}
 */
proto.proto.RoomMessage.prototype.getUpdateTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.proto.RoomMessage.prototype.setUpdateTime = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional bool deleted = 15;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.RoomMessage.prototype.getDeleted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 15, false));
};


/** @param {boolean} value */
proto.proto.RoomMessage.prototype.setDeleted = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional RoomMessage forward_from = 16;
 * @return {?proto.proto.RoomMessage}
 */
proto.proto.RoomMessage.prototype.getForwardFrom = function() {
  return /** @type{?proto.proto.RoomMessage} */ (
    jspb.Message.getWrapperField(this, proto.proto.RoomMessage, 16));
};


/** @param {?proto.proto.RoomMessage|undefined} value */
proto.proto.RoomMessage.prototype.setForwardFrom = function(value) {
  jspb.Message.setWrapperField(this, 16, value);
};


proto.proto.RoomMessage.prototype.clearForwardFrom = function() {
  this.setForwardFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.RoomMessage.prototype.hasForwardFrom = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional RoomMessage reply_to = 17;
 * @return {?proto.proto.RoomMessage}
 */
proto.proto.RoomMessage.prototype.getReplyTo = function() {
  return /** @type{?proto.proto.RoomMessage} */ (
    jspb.Message.getWrapperField(this, proto.proto.RoomMessage, 17));
};


/** @param {?proto.proto.RoomMessage|undefined} value */
proto.proto.RoomMessage.prototype.setReplyTo = function(value) {
  jspb.Message.setWrapperField(this, 17, value);
};


proto.proto.RoomMessage.prototype.clearReplyTo = function() {
  this.setReplyTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.RoomMessage.prototype.hasReplyTo = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional uint64 previous_message_id = 18;
 * @return {number}
 */
proto.proto.RoomMessage.prototype.getPreviousMessageId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.proto.RoomMessage.prototype.setPreviousMessageId = function(value) {
  jspb.Message.setField(this, 18, value);
};


/**
 * optional ExtraType extra_type = 19;
 * @return {!proto.proto.RoomMessage.ExtraType}
 */
proto.proto.RoomMessage.prototype.getExtraType = function() {
  return /** @type {!proto.proto.RoomMessage.ExtraType} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {!proto.proto.RoomMessage.ExtraType} value */
proto.proto.RoomMessage.prototype.setExtraType = function(value) {
  jspb.Message.setField(this, 19, value);
};


/**
 * optional ChannelExtra channel_extra = 20;
 * @return {?proto.proto.RoomMessage.ChannelExtra}
 */
proto.proto.RoomMessage.prototype.getChannelExtra = function() {
  return /** @type{?proto.proto.RoomMessage.ChannelExtra} */ (
    jspb.Message.getWrapperField(this, proto.proto.RoomMessage.ChannelExtra, 20));
};


/** @param {?proto.proto.RoomMessage.ChannelExtra|undefined} value */
proto.proto.RoomMessage.prototype.setChannelExtra = function(value) {
  jspb.Message.setWrapperField(this, 20, value);
};


proto.proto.RoomMessage.prototype.clearChannelExtra = function() {
  this.setChannelExtra(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.RoomMessage.prototype.hasChannelExtra = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RoomDraft = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.RoomDraft, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.RoomDraft.displayName = 'proto.proto.RoomDraft';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RoomDraft.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RoomDraft.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RoomDraft} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoomDraft.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, ""),
    replyTo: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RoomDraft}
 */
proto.proto.RoomDraft.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RoomDraft;
  return proto.proto.RoomDraft.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RoomDraft} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RoomDraft}
 */
proto.proto.RoomDraft.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setReplyTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RoomDraft.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RoomDraft.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RoomDraft} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RoomDraft.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReplyTo();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.proto.RoomDraft.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.RoomDraft.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 reply_to = 2;
 * @return {number}
 */
proto.proto.RoomDraft.prototype.getReplyTo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.RoomDraft.prototype.setReplyTo = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Room = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Room, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.Room.displayName = 'proto.proto.Room';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Room.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Room.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Room} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Room.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    title: jspb.Message.getFieldWithDefault(msg, 3, ""),
    initials: jspb.Message.getFieldWithDefault(msg, 4, ""),
    color: jspb.Message.getFieldWithDefault(msg, 5, ""),
    unreadCount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    lastMessage: (f = msg.getLastMessage()) && proto.proto.RoomMessage.toObject(includeInstance, f),
    readOnly: jspb.Message.getFieldWithDefault(msg, 8, false),
    isParticipant: jspb.Message.getFieldWithDefault(msg, 9, false),
    draft: (f = msg.getDraft()) && proto.proto.RoomDraft.toObject(includeInstance, f),
    firstUnreadMessage: (f = msg.getFirstUnreadMessage()) && proto.proto.RoomMessage.toObject(includeInstance, f),
    chatRoomExtra: (f = msg.getChatRoomExtra()) && proto.proto.ChatRoom.toObject(includeInstance, f),
    groupRoomExtra: (f = msg.getGroupRoomExtra()) && proto.proto.GroupRoom.toObject(includeInstance, f),
    channelRoomExtra: (f = msg.getChannelRoomExtra()) && proto.proto.ChannelRoom.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Room}
 */
proto.proto.Room.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Room;
  return proto.proto.Room.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Room} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Room}
 */
proto.proto.Room.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.proto.Room.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInitials(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUnreadCount(value);
      break;
    case 7:
      var value = new proto.proto.RoomMessage;
      reader.readMessage(value,proto.proto.RoomMessage.deserializeBinaryFromReader);
      msg.setLastMessage(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReadOnly(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsParticipant(value);
      break;
    case 10:
      var value = new proto.proto.RoomDraft;
      reader.readMessage(value,proto.proto.RoomDraft.deserializeBinaryFromReader);
      msg.setDraft(value);
      break;
    case 14:
      var value = new proto.proto.RoomMessage;
      reader.readMessage(value,proto.proto.RoomMessage.deserializeBinaryFromReader);
      msg.setFirstUnreadMessage(value);
      break;
    case 11:
      var value = new proto.proto.ChatRoom;
      reader.readMessage(value,proto.proto.ChatRoom.deserializeBinaryFromReader);
      msg.setChatRoomExtra(value);
      break;
    case 12:
      var value = new proto.proto.GroupRoom;
      reader.readMessage(value,proto.proto.GroupRoom.deserializeBinaryFromReader);
      msg.setGroupRoomExtra(value);
      break;
    case 13:
      var value = new proto.proto.ChannelRoom;
      reader.readMessage(value,proto.proto.ChannelRoom.deserializeBinaryFromReader);
      msg.setChannelRoomExtra(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Room.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Room.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Room} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Room.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInitials();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUnreadCount();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getLastMessage();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.proto.RoomMessage.serializeBinaryToWriter
    );
  }
  f = message.getReadOnly();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getIsParticipant();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getDraft();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.proto.RoomDraft.serializeBinaryToWriter
    );
  }
  f = message.getFirstUnreadMessage();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.proto.RoomMessage.serializeBinaryToWriter
    );
  }
  f = message.getChatRoomExtra();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.proto.ChatRoom.serializeBinaryToWriter
    );
  }
  f = message.getGroupRoomExtra();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.proto.GroupRoom.serializeBinaryToWriter
    );
  }
  f = message.getChannelRoomExtra();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.proto.ChannelRoom.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.Room.Type = {
  CHAT: 0,
  GROUP: 1,
  CHANNEL: 2
};

/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.proto.Room.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.Room.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Type type = 2;
 * @return {!proto.proto.Room.Type}
 */
proto.proto.Room.prototype.getType = function() {
  return /** @type {!proto.proto.Room.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.proto.Room.Type} value */
proto.proto.Room.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string title = 3;
 * @return {string}
 */
proto.proto.Room.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.proto.Room.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string initials = 4;
 * @return {string}
 */
proto.proto.Room.prototype.getInitials = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.proto.Room.prototype.setInitials = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string color = 5;
 * @return {string}
 */
proto.proto.Room.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.proto.Room.prototype.setColor = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 unread_count = 6;
 * @return {number}
 */
proto.proto.Room.prototype.getUnreadCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.proto.Room.prototype.setUnreadCount = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional RoomMessage last_message = 7;
 * @return {?proto.proto.RoomMessage}
 */
proto.proto.Room.prototype.getLastMessage = function() {
  return /** @type{?proto.proto.RoomMessage} */ (
    jspb.Message.getWrapperField(this, proto.proto.RoomMessage, 7));
};


/** @param {?proto.proto.RoomMessage|undefined} value */
proto.proto.Room.prototype.setLastMessage = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.proto.Room.prototype.clearLastMessage = function() {
  this.setLastMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Room.prototype.hasLastMessage = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool read_only = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.Room.prototype.getReadOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.proto.Room.prototype.setReadOnly = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional bool is_participant = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.Room.prototype.getIsParticipant = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.proto.Room.prototype.setIsParticipant = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional RoomDraft draft = 10;
 * @return {?proto.proto.RoomDraft}
 */
proto.proto.Room.prototype.getDraft = function() {
  return /** @type{?proto.proto.RoomDraft} */ (
    jspb.Message.getWrapperField(this, proto.proto.RoomDraft, 10));
};


/** @param {?proto.proto.RoomDraft|undefined} value */
proto.proto.Room.prototype.setDraft = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.proto.Room.prototype.clearDraft = function() {
  this.setDraft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Room.prototype.hasDraft = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional RoomMessage first_unread_message = 14;
 * @return {?proto.proto.RoomMessage}
 */
proto.proto.Room.prototype.getFirstUnreadMessage = function() {
  return /** @type{?proto.proto.RoomMessage} */ (
    jspb.Message.getWrapperField(this, proto.proto.RoomMessage, 14));
};


/** @param {?proto.proto.RoomMessage|undefined} value */
proto.proto.Room.prototype.setFirstUnreadMessage = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.proto.Room.prototype.clearFirstUnreadMessage = function() {
  this.setFirstUnreadMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Room.prototype.hasFirstUnreadMessage = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional ChatRoom chat_room_extra = 11;
 * @return {?proto.proto.ChatRoom}
 */
proto.proto.Room.prototype.getChatRoomExtra = function() {
  return /** @type{?proto.proto.ChatRoom} */ (
    jspb.Message.getWrapperField(this, proto.proto.ChatRoom, 11));
};


/** @param {?proto.proto.ChatRoom|undefined} value */
proto.proto.Room.prototype.setChatRoomExtra = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.proto.Room.prototype.clearChatRoomExtra = function() {
  this.setChatRoomExtra(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Room.prototype.hasChatRoomExtra = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional GroupRoom group_room_extra = 12;
 * @return {?proto.proto.GroupRoom}
 */
proto.proto.Room.prototype.getGroupRoomExtra = function() {
  return /** @type{?proto.proto.GroupRoom} */ (
    jspb.Message.getWrapperField(this, proto.proto.GroupRoom, 12));
};


/** @param {?proto.proto.GroupRoom|undefined} value */
proto.proto.Room.prototype.setGroupRoomExtra = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.proto.Room.prototype.clearGroupRoomExtra = function() {
  this.setGroupRoomExtra(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Room.prototype.hasGroupRoomExtra = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional ChannelRoom channel_room_extra = 13;
 * @return {?proto.proto.ChannelRoom}
 */
proto.proto.Room.prototype.getChannelRoomExtra = function() {
  return /** @type{?proto.proto.ChannelRoom} */ (
    jspb.Message.getWrapperField(this, proto.proto.ChannelRoom, 13));
};


/** @param {?proto.proto.ChannelRoom|undefined} value */
proto.proto.Room.prototype.setChannelRoomExtra = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.proto.Room.prototype.clearChannelRoomExtra = function() {
  this.setChannelRoomExtra(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Room.prototype.hasChannelRoomExtra = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ChatRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ChatRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ChatRoom.displayName = 'proto.proto.ChatRoom';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ChatRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ChatRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ChatRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ChatRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && proto.proto.RegisteredUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ChatRoom}
 */
proto.proto.ChatRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ChatRoom;
  return proto.proto.ChatRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ChatRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ChatRoom}
 */
proto.proto.ChatRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.RegisteredUser;
      reader.readMessage(value,proto.proto.RegisteredUser.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ChatRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ChatRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ChatRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ChatRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.RegisteredUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional RegisteredUser peer = 1;
 * @return {?proto.proto.RegisteredUser}
 */
proto.proto.ChatRoom.prototype.getPeer = function() {
  return /** @type{?proto.proto.RegisteredUser} */ (
    jspb.Message.getWrapperField(this, proto.proto.RegisteredUser, 1));
};


/** @param {?proto.proto.RegisteredUser|undefined} value */
proto.proto.ChatRoom.prototype.setPeer = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.ChatRoom.prototype.clearPeer = function() {
  this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.ChatRoom.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.GroupRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.GroupRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.GroupRoom.displayName = 'proto.proto.GroupRoom';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.GroupRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.GroupRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.GroupRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GroupRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    role: jspb.Message.getFieldWithDefault(msg, 2, 0),
    participantsCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    participantsCountLabel: jspb.Message.getFieldWithDefault(msg, 4, ""),
    participantsCountLimit: jspb.Message.getFieldWithDefault(msg, 5, 0),
    participantsCountLimitLabel: jspb.Message.getFieldWithDefault(msg, 6, ""),
    description: jspb.Message.getFieldWithDefault(msg, 7, ""),
    avatarCount: jspb.Message.getFieldWithDefault(msg, 8, 0),
    avatar: (f = msg.getAvatar()) && proto.proto.Avatar.toObject(includeInstance, f),
    privateExtra: (f = msg.getPrivateExtra()) && proto.proto.GroupRoom.PrivateExtra.toObject(includeInstance, f),
    publicExtra: (f = msg.getPublicExtra()) && proto.proto.GroupRoom.PublicExtra.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.GroupRoom}
 */
proto.proto.GroupRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.GroupRoom;
  return proto.proto.GroupRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.GroupRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.GroupRoom}
 */
proto.proto.GroupRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.GroupRoom.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!proto.proto.GroupRoom.Role} */ (reader.readEnum());
      msg.setRole(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setParticipantsCount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setParticipantsCountLabel(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setParticipantsCountLimit(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setParticipantsCountLimitLabel(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAvatarCount(value);
      break;
    case 9:
      var value = new proto.proto.Avatar;
      reader.readMessage(value,proto.proto.Avatar.deserializeBinaryFromReader);
      msg.setAvatar(value);
      break;
    case 10:
      var value = new proto.proto.GroupRoom.PrivateExtra;
      reader.readMessage(value,proto.proto.GroupRoom.PrivateExtra.deserializeBinaryFromReader);
      msg.setPrivateExtra(value);
      break;
    case 11:
      var value = new proto.proto.GroupRoom.PublicExtra;
      reader.readMessage(value,proto.proto.GroupRoom.PublicExtra.deserializeBinaryFromReader);
      msg.setPublicExtra(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.GroupRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.GroupRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.GroupRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GroupRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRole();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getParticipantsCount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getParticipantsCountLabel();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getParticipantsCountLimit();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getParticipantsCountLimitLabel();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAvatarCount();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getAvatar();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.proto.Avatar.serializeBinaryToWriter
    );
  }
  f = message.getPrivateExtra();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.proto.GroupRoom.PrivateExtra.serializeBinaryToWriter
    );
  }
  f = message.getPublicExtra();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.proto.GroupRoom.PublicExtra.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.GroupRoom.Type = {
  PRIVATE_ROOM: 0,
  PUBLIC_ROOM: 1
};

/**
 * @enum {number}
 */
proto.proto.GroupRoom.Role = {
  MEMBER: 0,
  MODERATOR: 1,
  ADMIN: 2,
  OWNER: 3
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.GroupRoom.PrivateExtra = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.GroupRoom.PrivateExtra, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.GroupRoom.PrivateExtra.displayName = 'proto.proto.GroupRoom.PrivateExtra';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.GroupRoom.PrivateExtra.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.GroupRoom.PrivateExtra.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.GroupRoom.PrivateExtra} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GroupRoom.PrivateExtra.toObject = function(includeInstance, msg) {
  var f, obj = {
    inviteLink: jspb.Message.getFieldWithDefault(msg, 1, ""),
    inviteToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.GroupRoom.PrivateExtra}
 */
proto.proto.GroupRoom.PrivateExtra.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.GroupRoom.PrivateExtra;
  return proto.proto.GroupRoom.PrivateExtra.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.GroupRoom.PrivateExtra} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.GroupRoom.PrivateExtra}
 */
proto.proto.GroupRoom.PrivateExtra.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInviteLink(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInviteToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.GroupRoom.PrivateExtra.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.GroupRoom.PrivateExtra.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.GroupRoom.PrivateExtra} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GroupRoom.PrivateExtra.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInviteLink();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInviteToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string invite_link = 1;
 * @return {string}
 */
proto.proto.GroupRoom.PrivateExtra.prototype.getInviteLink = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.GroupRoom.PrivateExtra.prototype.setInviteLink = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string invite_token = 2;
 * @return {string}
 */
proto.proto.GroupRoom.PrivateExtra.prototype.getInviteToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.GroupRoom.PrivateExtra.prototype.setInviteToken = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.GroupRoom.PublicExtra = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.GroupRoom.PublicExtra, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.GroupRoom.PublicExtra.displayName = 'proto.proto.GroupRoom.PublicExtra';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.GroupRoom.PublicExtra.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.GroupRoom.PublicExtra.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.GroupRoom.PublicExtra} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GroupRoom.PublicExtra.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.GroupRoom.PublicExtra}
 */
proto.proto.GroupRoom.PublicExtra.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.GroupRoom.PublicExtra;
  return proto.proto.GroupRoom.PublicExtra.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.GroupRoom.PublicExtra} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.GroupRoom.PublicExtra}
 */
proto.proto.GroupRoom.PublicExtra.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.GroupRoom.PublicExtra.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.GroupRoom.PublicExtra.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.GroupRoom.PublicExtra} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GroupRoom.PublicExtra.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.proto.GroupRoom.PublicExtra.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.GroupRoom.PublicExtra.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Type type = 1;
 * @return {!proto.proto.GroupRoom.Type}
 */
proto.proto.GroupRoom.prototype.getType = function() {
  return /** @type {!proto.proto.GroupRoom.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.proto.GroupRoom.Type} value */
proto.proto.GroupRoom.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Role role = 2;
 * @return {!proto.proto.GroupRoom.Role}
 */
proto.proto.GroupRoom.prototype.getRole = function() {
  return /** @type {!proto.proto.GroupRoom.Role} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.proto.GroupRoom.Role} value */
proto.proto.GroupRoom.prototype.setRole = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 participants_count = 3;
 * @return {number}
 */
proto.proto.GroupRoom.prototype.getParticipantsCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.GroupRoom.prototype.setParticipantsCount = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string participants_count_label = 4;
 * @return {string}
 */
proto.proto.GroupRoom.prototype.getParticipantsCountLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.proto.GroupRoom.prototype.setParticipantsCountLabel = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 participants_count_limit = 5;
 * @return {number}
 */
proto.proto.GroupRoom.prototype.getParticipantsCountLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.proto.GroupRoom.prototype.setParticipantsCountLimit = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string participants_count_limit_label = 6;
 * @return {string}
 */
proto.proto.GroupRoom.prototype.getParticipantsCountLimitLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.proto.GroupRoom.prototype.setParticipantsCountLimitLabel = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string description = 7;
 * @return {string}
 */
proto.proto.GroupRoom.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.proto.GroupRoom.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional uint32 avatar_count = 8;
 * @return {number}
 */
proto.proto.GroupRoom.prototype.getAvatarCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.proto.GroupRoom.prototype.setAvatarCount = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional Avatar avatar = 9;
 * @return {?proto.proto.Avatar}
 */
proto.proto.GroupRoom.prototype.getAvatar = function() {
  return /** @type{?proto.proto.Avatar} */ (
    jspb.Message.getWrapperField(this, proto.proto.Avatar, 9));
};


/** @param {?proto.proto.Avatar|undefined} value */
proto.proto.GroupRoom.prototype.setAvatar = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.proto.GroupRoom.prototype.clearAvatar = function() {
  this.setAvatar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.GroupRoom.prototype.hasAvatar = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional PrivateExtra private_extra = 10;
 * @return {?proto.proto.GroupRoom.PrivateExtra}
 */
proto.proto.GroupRoom.prototype.getPrivateExtra = function() {
  return /** @type{?proto.proto.GroupRoom.PrivateExtra} */ (
    jspb.Message.getWrapperField(this, proto.proto.GroupRoom.PrivateExtra, 10));
};


/** @param {?proto.proto.GroupRoom.PrivateExtra|undefined} value */
proto.proto.GroupRoom.prototype.setPrivateExtra = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.proto.GroupRoom.prototype.clearPrivateExtra = function() {
  this.setPrivateExtra(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.GroupRoom.prototype.hasPrivateExtra = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional PublicExtra public_extra = 11;
 * @return {?proto.proto.GroupRoom.PublicExtra}
 */
proto.proto.GroupRoom.prototype.getPublicExtra = function() {
  return /** @type{?proto.proto.GroupRoom.PublicExtra} */ (
    jspb.Message.getWrapperField(this, proto.proto.GroupRoom.PublicExtra, 11));
};


/** @param {?proto.proto.GroupRoom.PublicExtra|undefined} value */
proto.proto.GroupRoom.prototype.setPublicExtra = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.proto.GroupRoom.prototype.clearPublicExtra = function() {
  this.setPublicExtra(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.GroupRoom.prototype.hasPublicExtra = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ChannelRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ChannelRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ChannelRoom.displayName = 'proto.proto.ChannelRoom';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ChannelRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ChannelRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ChannelRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ChannelRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    role: jspb.Message.getFieldWithDefault(msg, 2, 0),
    participantsCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    participantsCountLabel: jspb.Message.getFieldWithDefault(msg, 4, ""),
    description: jspb.Message.getFieldWithDefault(msg, 5, ""),
    avatarCount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    avatar: (f = msg.getAvatar()) && proto.proto.Avatar.toObject(includeInstance, f),
    privateExtra: (f = msg.getPrivateExtra()) && proto.proto.ChannelRoom.PrivateExtra.toObject(includeInstance, f),
    publicExtra: (f = msg.getPublicExtra()) && proto.proto.ChannelRoom.PublicExtra.toObject(includeInstance, f),
    signature: jspb.Message.getFieldWithDefault(msg, 10, false),
    seenId: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ChannelRoom}
 */
proto.proto.ChannelRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ChannelRoom;
  return proto.proto.ChannelRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ChannelRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ChannelRoom}
 */
proto.proto.ChannelRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.ChannelRoom.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!proto.proto.ChannelRoom.Role} */ (reader.readEnum());
      msg.setRole(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setParticipantsCount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setParticipantsCountLabel(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAvatarCount(value);
      break;
    case 7:
      var value = new proto.proto.Avatar;
      reader.readMessage(value,proto.proto.Avatar.deserializeBinaryFromReader);
      msg.setAvatar(value);
      break;
    case 8:
      var value = new proto.proto.ChannelRoom.PrivateExtra;
      reader.readMessage(value,proto.proto.ChannelRoom.PrivateExtra.deserializeBinaryFromReader);
      msg.setPrivateExtra(value);
      break;
    case 9:
      var value = new proto.proto.ChannelRoom.PublicExtra;
      reader.readMessage(value,proto.proto.ChannelRoom.PublicExtra.deserializeBinaryFromReader);
      msg.setPublicExtra(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSignature(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeenId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ChannelRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ChannelRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ChannelRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ChannelRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRole();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getParticipantsCount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getParticipantsCountLabel();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAvatarCount();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getAvatar();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.proto.Avatar.serializeBinaryToWriter
    );
  }
  f = message.getPrivateExtra();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.proto.ChannelRoom.PrivateExtra.serializeBinaryToWriter
    );
  }
  f = message.getPublicExtra();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.proto.ChannelRoom.PublicExtra.serializeBinaryToWriter
    );
  }
  f = message.getSignature();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getSeenId();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.ChannelRoom.Type = {
  PRIVATE_ROOM: 0,
  PUBLIC_ROOM: 1
};

/**
 * @enum {number}
 */
proto.proto.ChannelRoom.Role = {
  MEMBER: 0,
  MODERATOR: 1,
  ADMIN: 2,
  OWNER: 3
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ChannelRoom.PrivateExtra = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ChannelRoom.PrivateExtra, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ChannelRoom.PrivateExtra.displayName = 'proto.proto.ChannelRoom.PrivateExtra';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ChannelRoom.PrivateExtra.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ChannelRoom.PrivateExtra.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ChannelRoom.PrivateExtra} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ChannelRoom.PrivateExtra.toObject = function(includeInstance, msg) {
  var f, obj = {
    inviteLink: jspb.Message.getFieldWithDefault(msg, 1, ""),
    inviteToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ChannelRoom.PrivateExtra}
 */
proto.proto.ChannelRoom.PrivateExtra.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ChannelRoom.PrivateExtra;
  return proto.proto.ChannelRoom.PrivateExtra.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ChannelRoom.PrivateExtra} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ChannelRoom.PrivateExtra}
 */
proto.proto.ChannelRoom.PrivateExtra.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInviteLink(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInviteToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ChannelRoom.PrivateExtra.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ChannelRoom.PrivateExtra.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ChannelRoom.PrivateExtra} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ChannelRoom.PrivateExtra.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInviteLink();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInviteToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string invite_link = 1;
 * @return {string}
 */
proto.proto.ChannelRoom.PrivateExtra.prototype.getInviteLink = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.ChannelRoom.PrivateExtra.prototype.setInviteLink = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string invite_token = 2;
 * @return {string}
 */
proto.proto.ChannelRoom.PrivateExtra.prototype.getInviteToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.ChannelRoom.PrivateExtra.prototype.setInviteToken = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ChannelRoom.PublicExtra = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ChannelRoom.PublicExtra, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ChannelRoom.PublicExtra.displayName = 'proto.proto.ChannelRoom.PublicExtra';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ChannelRoom.PublicExtra.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ChannelRoom.PublicExtra.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ChannelRoom.PublicExtra} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ChannelRoom.PublicExtra.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ChannelRoom.PublicExtra}
 */
proto.proto.ChannelRoom.PublicExtra.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ChannelRoom.PublicExtra;
  return proto.proto.ChannelRoom.PublicExtra.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ChannelRoom.PublicExtra} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ChannelRoom.PublicExtra}
 */
proto.proto.ChannelRoom.PublicExtra.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ChannelRoom.PublicExtra.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ChannelRoom.PublicExtra.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ChannelRoom.PublicExtra} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ChannelRoom.PublicExtra.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.proto.ChannelRoom.PublicExtra.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.ChannelRoom.PublicExtra.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Type type = 1;
 * @return {!proto.proto.ChannelRoom.Type}
 */
proto.proto.ChannelRoom.prototype.getType = function() {
  return /** @type {!proto.proto.ChannelRoom.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.proto.ChannelRoom.Type} value */
proto.proto.ChannelRoom.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Role role = 2;
 * @return {!proto.proto.ChannelRoom.Role}
 */
proto.proto.ChannelRoom.prototype.getRole = function() {
  return /** @type {!proto.proto.ChannelRoom.Role} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.proto.ChannelRoom.Role} value */
proto.proto.ChannelRoom.prototype.setRole = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 participants_count = 3;
 * @return {number}
 */
proto.proto.ChannelRoom.prototype.getParticipantsCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.ChannelRoom.prototype.setParticipantsCount = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string participants_count_label = 4;
 * @return {string}
 */
proto.proto.ChannelRoom.prototype.getParticipantsCountLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.proto.ChannelRoom.prototype.setParticipantsCountLabel = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.proto.ChannelRoom.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.proto.ChannelRoom.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 avatar_count = 6;
 * @return {number}
 */
proto.proto.ChannelRoom.prototype.getAvatarCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.proto.ChannelRoom.prototype.setAvatarCount = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional Avatar avatar = 7;
 * @return {?proto.proto.Avatar}
 */
proto.proto.ChannelRoom.prototype.getAvatar = function() {
  return /** @type{?proto.proto.Avatar} */ (
    jspb.Message.getWrapperField(this, proto.proto.Avatar, 7));
};


/** @param {?proto.proto.Avatar|undefined} value */
proto.proto.ChannelRoom.prototype.setAvatar = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.proto.ChannelRoom.prototype.clearAvatar = function() {
  this.setAvatar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.ChannelRoom.prototype.hasAvatar = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional PrivateExtra private_extra = 8;
 * @return {?proto.proto.ChannelRoom.PrivateExtra}
 */
proto.proto.ChannelRoom.prototype.getPrivateExtra = function() {
  return /** @type{?proto.proto.ChannelRoom.PrivateExtra} */ (
    jspb.Message.getWrapperField(this, proto.proto.ChannelRoom.PrivateExtra, 8));
};


/** @param {?proto.proto.ChannelRoom.PrivateExtra|undefined} value */
proto.proto.ChannelRoom.prototype.setPrivateExtra = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.proto.ChannelRoom.prototype.clearPrivateExtra = function() {
  this.setPrivateExtra(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.ChannelRoom.prototype.hasPrivateExtra = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional PublicExtra public_extra = 9;
 * @return {?proto.proto.ChannelRoom.PublicExtra}
 */
proto.proto.ChannelRoom.prototype.getPublicExtra = function() {
  return /** @type{?proto.proto.ChannelRoom.PublicExtra} */ (
    jspb.Message.getWrapperField(this, proto.proto.ChannelRoom.PublicExtra, 9));
};


/** @param {?proto.proto.ChannelRoom.PublicExtra|undefined} value */
proto.proto.ChannelRoom.prototype.setPublicExtra = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.proto.ChannelRoom.prototype.clearPublicExtra = function() {
  this.setPublicExtra(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.ChannelRoom.prototype.hasPublicExtra = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool signature = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.proto.ChannelRoom.prototype.getSignature = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.proto.ChannelRoom.prototype.setSignature = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional uint64 seen_id = 11;
 * @return {number}
 */
proto.proto.ChannelRoom.prototype.getSeenId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.proto.ChannelRoom.prototype.setSeenId = function(value) {
  jspb.Message.setField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Thumbnail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Thumbnail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.Thumbnail.displayName = 'proto.proto.Thumbnail';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Thumbnail.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Thumbnail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Thumbnail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Thumbnail.toObject = function(includeInstance, msg) {
  var f, obj = {
    size: jspb.Message.getFieldWithDefault(msg, 1, 0),
    width: jspb.Message.getFieldWithDefault(msg, 2, 0),
    height: jspb.Message.getFieldWithDefault(msg, 3, 0),
    cacheId: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Thumbnail}
 */
proto.proto.Thumbnail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Thumbnail;
  return proto.proto.Thumbnail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Thumbnail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Thumbnail}
 */
proto.proto.Thumbnail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCacheId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Thumbnail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Thumbnail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Thumbnail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Thumbnail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getCacheId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int64 size = 1;
 * @return {number}
 */
proto.proto.Thumbnail.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.Thumbnail.prototype.setSize = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 width = 2;
 * @return {number}
 */
proto.proto.Thumbnail.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.Thumbnail.prototype.setWidth = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 height = 3;
 * @return {number}
 */
proto.proto.Thumbnail.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.Thumbnail.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string cache_id = 4;
 * @return {string}
 */
proto.proto.Thumbnail.prototype.getCacheId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.proto.Thumbnail.prototype.setCacheId = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.File = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.File, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.File.displayName = 'proto.proto.File';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.File.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.File.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.File} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.File.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    size: jspb.Message.getFieldWithDefault(msg, 3, 0),
    largeThumbnail: (f = msg.getLargeThumbnail()) && proto.proto.Thumbnail.toObject(includeInstance, f),
    smallThumbnail: (f = msg.getSmallThumbnail()) && proto.proto.Thumbnail.toObject(includeInstance, f),
    waveformThumbnail: (f = msg.getWaveformThumbnail()) && proto.proto.Thumbnail.toObject(includeInstance, f),
    width: jspb.Message.getFieldWithDefault(msg, 7, 0),
    height: jspb.Message.getFieldWithDefault(msg, 8, 0),
    duration: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    cacheId: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.File}
 */
proto.proto.File.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.File;
  return proto.proto.File.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.File} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.File}
 */
proto.proto.File.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSize(value);
      break;
    case 4:
      var value = new proto.proto.Thumbnail;
      reader.readMessage(value,proto.proto.Thumbnail.deserializeBinaryFromReader);
      msg.setLargeThumbnail(value);
      break;
    case 5:
      var value = new proto.proto.Thumbnail;
      reader.readMessage(value,proto.proto.Thumbnail.deserializeBinaryFromReader);
      msg.setSmallThumbnail(value);
      break;
    case 6:
      var value = new proto.proto.Thumbnail;
      reader.readMessage(value,proto.proto.Thumbnail.deserializeBinaryFromReader);
      msg.setWaveformThumbnail(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDuration(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCacheId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.File.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.File.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.File} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.File.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getLargeThumbnail();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.proto.Thumbnail.serializeBinaryToWriter
    );
  }
  f = message.getSmallThumbnail();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.proto.Thumbnail.serializeBinaryToWriter
    );
  }
  f = message.getWaveformThumbnail();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.proto.Thumbnail.serializeBinaryToWriter
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getCacheId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.proto.File.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.proto.File.prototype.setToken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.proto.File.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.File.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 size = 3;
 * @return {number}
 */
proto.proto.File.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.File.prototype.setSize = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional Thumbnail large_thumbnail = 4;
 * @return {?proto.proto.Thumbnail}
 */
proto.proto.File.prototype.getLargeThumbnail = function() {
  return /** @type{?proto.proto.Thumbnail} */ (
    jspb.Message.getWrapperField(this, proto.proto.Thumbnail, 4));
};


/** @param {?proto.proto.Thumbnail|undefined} value */
proto.proto.File.prototype.setLargeThumbnail = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.proto.File.prototype.clearLargeThumbnail = function() {
  this.setLargeThumbnail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.File.prototype.hasLargeThumbnail = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Thumbnail small_thumbnail = 5;
 * @return {?proto.proto.Thumbnail}
 */
proto.proto.File.prototype.getSmallThumbnail = function() {
  return /** @type{?proto.proto.Thumbnail} */ (
    jspb.Message.getWrapperField(this, proto.proto.Thumbnail, 5));
};


/** @param {?proto.proto.Thumbnail|undefined} value */
proto.proto.File.prototype.setSmallThumbnail = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.proto.File.prototype.clearSmallThumbnail = function() {
  this.setSmallThumbnail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.File.prototype.hasSmallThumbnail = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Thumbnail waveform_thumbnail = 6;
 * @return {?proto.proto.Thumbnail}
 */
proto.proto.File.prototype.getWaveformThumbnail = function() {
  return /** @type{?proto.proto.Thumbnail} */ (
    jspb.Message.getWrapperField(this, proto.proto.Thumbnail, 6));
};


/** @param {?proto.proto.Thumbnail|undefined} value */
proto.proto.File.prototype.setWaveformThumbnail = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.proto.File.prototype.clearWaveformThumbnail = function() {
  this.setWaveformThumbnail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.File.prototype.hasWaveformThumbnail = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 width = 7;
 * @return {number}
 */
proto.proto.File.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.proto.File.prototype.setWidth = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int32 height = 8;
 * @return {number}
 */
proto.proto.File.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.proto.File.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional double duration = 9;
 * @return {number}
 */
proto.proto.File.prototype.getDuration = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.proto.File.prototype.setDuration = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string cache_id = 10;
 * @return {string}
 */
proto.proto.File.prototype.getCacheId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.proto.File.prototype.setCacheId = function(value) {
  jspb.Message.setField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Wallpaper = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Wallpaper, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.Wallpaper.displayName = 'proto.proto.Wallpaper';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Wallpaper.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Wallpaper.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Wallpaper} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Wallpaper.toObject = function(includeInstance, msg) {
  var f, obj = {
    file: (f = msg.getFile()) && proto.proto.File.toObject(includeInstance, f),
    color: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Wallpaper}
 */
proto.proto.Wallpaper.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Wallpaper;
  return proto.proto.Wallpaper.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Wallpaper} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Wallpaper}
 */
proto.proto.Wallpaper.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.File;
      reader.readMessage(value,proto.proto.File.deserializeBinaryFromReader);
      msg.setFile(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Wallpaper.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Wallpaper.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Wallpaper} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Wallpaper.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFile();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.File.serializeBinaryToWriter
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional File file = 1;
 * @return {?proto.proto.File}
 */
proto.proto.Wallpaper.prototype.getFile = function() {
  return /** @type{?proto.proto.File} */ (
    jspb.Message.getWrapperField(this, proto.proto.File, 1));
};


/** @param {?proto.proto.File|undefined} value */
proto.proto.Wallpaper.prototype.setFile = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.Wallpaper.prototype.clearFile = function() {
  this.setFile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.Wallpaper.prototype.hasFile = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string color = 2;
 * @return {string}
 */
proto.proto.Wallpaper.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.Wallpaper.prototype.setColor = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Pagination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Pagination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.Pagination.displayName = 'proto.proto.Pagination';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Pagination.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Pagination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Pagination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Pagination.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: jspb.Message.getFieldWithDefault(msg, 1, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Pagination}
 */
proto.proto.Pagination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Pagination;
  return proto.proto.Pagination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Pagination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Pagination}
 */
proto.proto.Pagination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Pagination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Pagination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Pagination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Pagination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 offset = 1;
 * @return {number}
 */
proto.proto.Pagination.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.Pagination.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 limit = 2;
 * @return {number}
 */
proto.proto.Pagination.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.Pagination.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.proto.Gender = {
  UNKNOWN: 0,
  MALE: 1,
  FEMALE: 2
};

/**
 * @enum {number}
 */
proto.proto.Device = {
  UNKNOWN_DEVICE: 0,
  PC: 1,
  TABLET: 2,
  MOBILE: 3
};

/**
 * @enum {number}
 */
proto.proto.Platform = {
  UNKNOWN_PLATFORM: 0,
  ANDROID: 1,
  IOS: 2,
  MAC_OS: 3,
  WINDOWS: 4,
  LINUX: 5,
  BLACK_BERRY: 6
};

/**
 * @enum {number}
 */
proto.proto.Language = {
  EN_US: 0,
  FA_IR: 1
};

/**
 * @enum {number}
 */
proto.proto.RoomMessageType = {
  TEXT: 0,
  IMAGE: 1,
  IMAGE_TEXT: 2,
  VIDEO: 3,
  VIDEO_TEXT: 4,
  AUDIO: 5,
  AUDIO_TEXT: 6,
  VOICE: 7,
  GIF: 8,
  GIF_TEXT: 14,
  FILE: 9,
  FILE_TEXT: 10,
  LOCATION: 11,
  LOG: 12,
  CONTACT: 13
};

/**
 * @enum {number}
 */
proto.proto.RoomMessageStatus = {
  FAILED: 0,
  SENDING: 1,
  SENT: 2,
  DELIVERED: 3,
  SEEN: 4,
  LISTENED: 5
};

/**
 * @enum {number}
 */
proto.proto.RoomMessageReaction = {
  THUMBS_UP: 0,
  THUMBS_DOWN: 1
};

/**
 * @enum {number}
 */
proto.proto.ClientAction = {
  CANCEL: 0,
  TYPING: 1,
  SENDING_IMAGE: 2,
  CAPTURING_IMAGE: 3,
  SENDING_VIDEO: 4,
  CAPTURING_VIDEO: 5,
  SENDING_AUDIO: 6,
  RECORDING_VOICE: 7,
  SENDING_VOICE: 8,
  SENDING_DOCUMENT: 9,
  SENDING_GIF: 10,
  SENDING_FILE: 11,
  SENDING_LOCATION: 12,
  CHOOSING_CONTACT: 13,
  PAINTING: 14
};

/**
 * @enum {number}
 */
proto.proto.PrivacyType = {
  USER_STATUS: 0,
  AVATAR: 1,
  GROUP_INVITE: 2,
  CHANNEL_INVITE: 3,
  VOICE_CALLING: 4,
  VIDEO_CALLING: 5,
  SCREEN_SHARING: 6,
  SECRET_CHAT: 7
};

/**
 * @enum {number}
 */
proto.proto.PrivacyLevel = {
  ALLOW_ALL: 0,
  DENY_ALL: 1,
  ALLOW_CONTACTS: 2
};

goog.object.extend(exports, proto.proto);
