/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Request_pb = require('./Request_pb.js');
var Response_pb = require('./Response_pb.js');
goog.exportSymbol('proto.proto.ClientCondition', null, global);
goog.exportSymbol('proto.proto.ClientCondition.Room', null, global);
goog.exportSymbol('proto.proto.ClientCondition.Room.OfflineEdited', null, global);
goog.exportSymbol('proto.proto.ClientCondition.Room.OfflineMute', null, global);
goog.exportSymbol('proto.proto.ClientConditionResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ClientCondition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.ClientCondition.repeatedFields_, null);
};
goog.inherits(proto.proto.ClientCondition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ClientCondition.displayName = 'proto.proto.ClientCondition';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.ClientCondition.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ClientCondition.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ClientCondition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ClientCondition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ClientCondition.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && Request_pb.Request.toObject(includeInstance, f),
    roomsList: jspb.Message.toObjectList(msg.getRoomsList(),
    proto.proto.ClientCondition.Room.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ClientCondition}
 */
proto.proto.ClientCondition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ClientCondition;
  return proto.proto.ClientCondition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ClientCondition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ClientCondition}
 */
proto.proto.ClientCondition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Request_pb.Request;
      reader.readMessage(value,Request_pb.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.proto.ClientCondition.Room;
      reader.readMessage(value,proto.proto.ClientCondition.Room.deserializeBinaryFromReader);
      msg.addRooms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ClientCondition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ClientCondition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ClientCondition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ClientCondition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Request_pb.Request.serializeBinaryToWriter
    );
  }
  f = message.getRoomsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.ClientCondition.Room.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ClientCondition.Room = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.ClientCondition.Room.repeatedFields_, null);
};
goog.inherits(proto.proto.ClientCondition.Room, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ClientCondition.Room.displayName = 'proto.proto.ClientCondition.Room';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.ClientCondition.Room.repeatedFields_ = [6,7,8,13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ClientCondition.Room.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ClientCondition.Room.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ClientCondition.Room} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ClientCondition.Room.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    messageVersion: jspb.Message.getFieldWithDefault(msg, 3, 0),
    statusVersion: jspb.Message.getFieldWithDefault(msg, 4, 0),
    deleteVersion: jspb.Message.getFieldWithDefault(msg, 5, 0),
    offlineDeletedList: jspb.Message.getRepeatedField(msg, 6),
    offlineEditedList: jspb.Message.toObjectList(msg.getOfflineEditedList(),
    proto.proto.ClientCondition.Room.OfflineEdited.toObject, includeInstance),
    offlineSeenList: jspb.Message.getRepeatedField(msg, 8),
    clearId: jspb.Message.getFieldWithDefault(msg, 9, 0),
    cacheStartId: jspb.Message.getFieldWithDefault(msg, 10, 0),
    cacheEndId: jspb.Message.getFieldWithDefault(msg, 11, 0),
    offlineMute: jspb.Message.getFieldWithDefault(msg, 12, 0),
    offlineListenedList: jspb.Message.getRepeatedField(msg, 13)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ClientCondition.Room}
 */
proto.proto.ClientCondition.Room.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ClientCondition.Room;
  return proto.proto.ClientCondition.Room.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ClientCondition.Room} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ClientCondition.Room}
 */
proto.proto.ClientCondition.Room.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRoomId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMessageVersion(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStatusVersion(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDeleteVersion(value);
      break;
    case 6:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint64());
      msg.setOfflineDeletedList(value);
      break;
    case 7:
      var value = new proto.proto.ClientCondition.Room.OfflineEdited;
      reader.readMessage(value,proto.proto.ClientCondition.Room.OfflineEdited.deserializeBinaryFromReader);
      msg.addOfflineEdited(value);
      break;
    case 8:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint64());
      msg.setOfflineSeenList(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClearId(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCacheStartId(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCacheEndId(value);
      break;
    case 12:
      var value = /** @type {!proto.proto.ClientCondition.Room.OfflineMute} */ (reader.readEnum());
      msg.setOfflineMute(value);
      break;
    case 13:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint64());
      msg.setOfflineListenedList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ClientCondition.Room.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ClientCondition.Room.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ClientCondition.Room} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ClientCondition.Room.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMessageVersion();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getStatusVersion();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getDeleteVersion();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getOfflineDeletedList();
  if (f.length > 0) {
    writer.writePackedUint64(
      6,
      f
    );
  }
  f = message.getOfflineEditedList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.proto.ClientCondition.Room.OfflineEdited.serializeBinaryToWriter
    );
  }
  f = message.getOfflineSeenList();
  if (f.length > 0) {
    writer.writePackedUint64(
      8,
      f
    );
  }
  f = message.getClearId();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getCacheStartId();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getCacheEndId();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = message.getOfflineMute();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = message.getOfflineListenedList();
  if (f.length > 0) {
    writer.writePackedUint64(
      13,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.ClientCondition.Room.OfflineMute = {
  UNCHANGED: 0,
  MUTED: 1,
  UNMUTED: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ClientCondition.Room.OfflineEdited = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ClientCondition.Room.OfflineEdited, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ClientCondition.Room.OfflineEdited.displayName = 'proto.proto.ClientCondition.Room.OfflineEdited';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ClientCondition.Room.OfflineEdited.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ClientCondition.Room.OfflineEdited.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ClientCondition.Room.OfflineEdited} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ClientCondition.Room.OfflineEdited.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ClientCondition.Room.OfflineEdited}
 */
proto.proto.ClientCondition.Room.OfflineEdited.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ClientCondition.Room.OfflineEdited;
  return proto.proto.ClientCondition.Room.OfflineEdited.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ClientCondition.Room.OfflineEdited} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ClientCondition.Room.OfflineEdited}
 */
proto.proto.ClientCondition.Room.OfflineEdited.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMessageId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ClientCondition.Room.OfflineEdited.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ClientCondition.Room.OfflineEdited.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ClientCondition.Room.OfflineEdited} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ClientCondition.Room.OfflineEdited.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint64 message_id = 1;
 * @return {number}
 */
proto.proto.ClientCondition.Room.OfflineEdited.prototype.getMessageId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.proto.ClientCondition.Room.OfflineEdited.prototype.setMessageId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.proto.ClientCondition.Room.OfflineEdited.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.proto.ClientCondition.Room.OfflineEdited.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 room_id = 2;
 * @return {number}
 */
proto.proto.ClientCondition.Room.prototype.getRoomId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.proto.ClientCondition.Room.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 message_version = 3;
 * @return {number}
 */
proto.proto.ClientCondition.Room.prototype.getMessageVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.proto.ClientCondition.Room.prototype.setMessageVersion = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint64 status_version = 4;
 * @return {number}
 */
proto.proto.ClientCondition.Room.prototype.getStatusVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.proto.ClientCondition.Room.prototype.setStatusVersion = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint64 delete_version = 5;
 * @return {number}
 */
proto.proto.ClientCondition.Room.prototype.getDeleteVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.proto.ClientCondition.Room.prototype.setDeleteVersion = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * repeated uint64 offline_deleted = 6;
 * @return {!Array.<number>}
 */
proto.proto.ClientCondition.Room.prototype.getOfflineDeletedList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array.<number>} value */
proto.proto.ClientCondition.Room.prototype.setOfflineDeletedList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.ClientCondition.Room.prototype.addOfflineDeleted = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.proto.ClientCondition.Room.prototype.clearOfflineDeletedList = function() {
  this.setOfflineDeletedList([]);
};


/**
 * repeated OfflineEdited offline_edited = 7;
 * @return {!Array.<!proto.proto.ClientCondition.Room.OfflineEdited>}
 */
proto.proto.ClientCondition.Room.prototype.getOfflineEditedList = function() {
  return /** @type{!Array.<!proto.proto.ClientCondition.Room.OfflineEdited>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.ClientCondition.Room.OfflineEdited, 7));
};


/** @param {!Array.<!proto.proto.ClientCondition.Room.OfflineEdited>} value */
proto.proto.ClientCondition.Room.prototype.setOfflineEditedList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.proto.ClientCondition.Room.OfflineEdited=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.ClientCondition.Room.OfflineEdited}
 */
proto.proto.ClientCondition.Room.prototype.addOfflineEdited = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.proto.ClientCondition.Room.OfflineEdited, opt_index);
};


proto.proto.ClientCondition.Room.prototype.clearOfflineEditedList = function() {
  this.setOfflineEditedList([]);
};


/**
 * repeated uint64 offline_seen = 8;
 * @return {!Array.<number>}
 */
proto.proto.ClientCondition.Room.prototype.getOfflineSeenList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array.<number>} value */
proto.proto.ClientCondition.Room.prototype.setOfflineSeenList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.ClientCondition.Room.prototype.addOfflineSeen = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.proto.ClientCondition.Room.prototype.clearOfflineSeenList = function() {
  this.setOfflineSeenList([]);
};


/**
 * optional uint64 clear_id = 9;
 * @return {number}
 */
proto.proto.ClientCondition.Room.prototype.getClearId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.proto.ClientCondition.Room.prototype.setClearId = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional uint64 cache_start_id = 10;
 * @return {number}
 */
proto.proto.ClientCondition.Room.prototype.getCacheStartId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.proto.ClientCondition.Room.prototype.setCacheStartId = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional uint64 cache_end_id = 11;
 * @return {number}
 */
proto.proto.ClientCondition.Room.prototype.getCacheEndId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.proto.ClientCondition.Room.prototype.setCacheEndId = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional OfflineMute offline_mute = 12;
 * @return {!proto.proto.ClientCondition.Room.OfflineMute}
 */
proto.proto.ClientCondition.Room.prototype.getOfflineMute = function() {
  return /** @type {!proto.proto.ClientCondition.Room.OfflineMute} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {!proto.proto.ClientCondition.Room.OfflineMute} value */
proto.proto.ClientCondition.Room.prototype.setOfflineMute = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * repeated uint64 offline_listened = 13;
 * @return {!Array.<number>}
 */
proto.proto.ClientCondition.Room.prototype.getOfflineListenedList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 13));
};


/** @param {!Array.<number>} value */
proto.proto.ClientCondition.Room.prototype.setOfflineListenedList = function(value) {
  jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.proto.ClientCondition.Room.prototype.addOfflineListened = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


proto.proto.ClientCondition.Room.prototype.clearOfflineListenedList = function() {
  this.setOfflineListenedList([]);
};


/**
 * optional Request request = 1;
 * @return {?proto.proto.Request}
 */
proto.proto.ClientCondition.prototype.getRequest = function() {
  return /** @type{?proto.proto.Request} */ (
    jspb.Message.getWrapperField(this, Request_pb.Request, 1));
};


/** @param {?proto.proto.Request|undefined} value */
proto.proto.ClientCondition.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.ClientCondition.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.ClientCondition.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Room rooms = 2;
 * @return {!Array.<!proto.proto.ClientCondition.Room>}
 */
proto.proto.ClientCondition.prototype.getRoomsList = function() {
  return /** @type{!Array.<!proto.proto.ClientCondition.Room>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.ClientCondition.Room, 2));
};


/** @param {!Array.<!proto.proto.ClientCondition.Room>} value */
proto.proto.ClientCondition.prototype.setRoomsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.ClientCondition.Room=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.ClientCondition.Room}
 */
proto.proto.ClientCondition.prototype.addRooms = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.ClientCondition.Room, opt_index);
};


proto.proto.ClientCondition.prototype.clearRoomsList = function() {
  this.setRoomsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ClientConditionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ClientConditionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proto.ClientConditionResponse.displayName = 'proto.proto.ClientConditionResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ClientConditionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ClientConditionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ClientConditionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ClientConditionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: (f = msg.getResponse()) && Response_pb.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ClientConditionResponse}
 */
proto.proto.ClientConditionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ClientConditionResponse;
  return proto.proto.ClientConditionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ClientConditionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ClientConditionResponse}
 */
proto.proto.ClientConditionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Response_pb.Response;
      reader.readMessage(value,Response_pb.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ClientConditionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ClientConditionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ClientConditionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ClientConditionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Response_pb.Response.serializeBinaryToWriter
    );
  }
};


/**
 * optional Response response = 1;
 * @return {?proto.proto.Response}
 */
proto.proto.ClientConditionResponse.prototype.getResponse = function() {
  return /** @type{?proto.proto.Response} */ (
    jspb.Message.getWrapperField(this, Response_pb.Response, 1));
};


/** @param {?proto.proto.Response|undefined} value */
proto.proto.ClientConditionResponse.prototype.setResponse = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.proto.ClientConditionResponse.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.proto.ClientConditionResponse.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.proto);
